name: run-tests
on:
  # test cron by running it once a day at 01:00
  schedule:
  - cron:  '0 1 * * *'
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
jobs:
  # go vet and go fmt are mandatory.
  # Other linters are optional but should dispay issues.
  linters:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Setup go 1.20
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'
      - name: Run go vet
        run: go vet ./...
      - name: Run gofmt
        run: |
          gofmt -s -l .
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then exit 1; fi
      # staticcheck and errcheck should be optional, issues should
      # be displayed to raise awareness but not fail the build.
      # There is an ongoing discussion whether github actions
      # will support such a feature which it currently does not.
      # Check https://github.com/actions/toolkit/issues/399
      # Until further notice errcheck and temporarily staticcheck
      # will be run but will not fail the build on error.
      # The "Secondary linter" step icon will show whether errcheck
      # or staticcheck were successful or not.
      - name: Run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...
        continue-on-error: true
      - name: Run errcheck
        run: |
          go install github.com/kisielk/errcheck@latest
          errcheck ./...
        continue-on-error: true

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.20', '1.18', '1.16']
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: Fetch dependencies
        run: go get -d ./...
      - name: Run build
        run: go build
      - name: Run tests
        run: go test ./...

  run-coverall:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Use golang version 1.20
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'
      - name: Fetch dependencies
        run: go get -d ./...
      - name: Install goveralls
        run: go install github.com/mattn/goveralls@latest
      - name: Create test coverage
        run: go test -covermode atomic -coverprofile=covprofile ./...
      - name: Send coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: goveralls -coverprofile=covprofile -service=github
